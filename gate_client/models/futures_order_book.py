# coding: utf-8

"""
    Gate API v4

    APIv4 合约接口提供了与合约交易相关的操作，包括公共接口查询合约市场行情，以及需要认证的私有接口， 实现基于 API 的自动交易。 API 文档按照 OpenAPI v3 标准制定 API 文档， 方便 API 使用者能够轻松生成需要的客户端代码，快速接入新的功能   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@mail.gate.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FuturesOrderBook(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'asks': 'list[FuturesOrderBookAsks]',
        'bids': 'list[FuturesOrderBookAsks]'
    }

    attribute_map = {
        'asks': 'asks',
        'bids': 'bids'
    }

    def __init__(self, asks=None, bids=None):  # noqa: E501
        """FuturesOrderBook - a model defined in OpenAPI"""  # noqa: E501

        self._asks = None
        self._bids = None
        self.discriminator = None

        self.asks = asks
        self.bids = bids

    @property
    def asks(self):
        """Gets the asks of this FuturesOrderBook.  # noqa: E501

        卖方深度列表  # noqa: E501

        :return: The asks of this FuturesOrderBook.  # noqa: E501
        :rtype: list[FuturesOrderBookAsks]
        """
        return self._asks

    @asks.setter
    def asks(self, asks):
        """Sets the asks of this FuturesOrderBook.

        卖方深度列表  # noqa: E501

        :param asks: The asks of this FuturesOrderBook.  # noqa: E501
        :type: list[FuturesOrderBookAsks]
        """
        if asks is None:
            raise ValueError("Invalid value for `asks`, must not be `None`")  # noqa: E501

        self._asks = asks

    @property
    def bids(self):
        """Gets the bids of this FuturesOrderBook.  # noqa: E501

        买方深度列表  # noqa: E501

        :return: The bids of this FuturesOrderBook.  # noqa: E501
        :rtype: list[FuturesOrderBookAsks]
        """
        return self._bids

    @bids.setter
    def bids(self, bids):
        """Sets the bids of this FuturesOrderBook.

        买方深度列表  # noqa: E501

        :param bids: The bids of this FuturesOrderBook.  # noqa: E501
        :type: list[FuturesOrderBookAsks]
        """
        if bids is None:
            raise ValueError("Invalid value for `bids`, must not be `None`")  # noqa: E501

        self._bids = bids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FuturesOrderBook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
