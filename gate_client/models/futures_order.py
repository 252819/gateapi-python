# coding: utf-8

"""
    Gate API v4

    APIv4 futures provides all sorts of futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@mail.gate.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FuturesOrder(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'create_time': 'float',
        'finish_time': 'float',
        'finish_as': 'str',
        'status': 'str',
        'contract': 'str',
        'size': 'int',
        'price': 'str',
        'close': 'bool',
        'is_close': 'bool',
        'tif': 'str',
        'left': 'int',
        'fill_price': 'str',
        'text': 'str'
    }

    attribute_map = {
        'id': 'id',
        'create_time': 'create_time',
        'finish_time': 'finish_time',
        'finish_as': 'finish_as',
        'status': 'status',
        'contract': 'contract',
        'size': 'size',
        'price': 'price',
        'close': 'close',
        'is_close': 'is_close',
        'tif': 'tif',
        'left': 'left',
        'fill_price': 'fill_price',
        'text': 'text'
    }

    def __init__(self, id=None, create_time=None, finish_time=None, finish_as=None, status=None, contract=None, size=None, price=None, close=False, is_close=None, tif='gtc', left=None, fill_price=None, text=None):  # noqa: E501
        """FuturesOrder - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._create_time = None
        self._finish_time = None
        self._finish_as = None
        self._status = None
        self._contract = None
        self._size = None
        self._price = None
        self._close = None
        self._is_close = None
        self._tif = None
        self._left = None
        self._fill_price = None
        self._text = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if create_time is not None:
            self.create_time = create_time
        if finish_time is not None:
            self.finish_time = finish_time
        if finish_as is not None:
            self.finish_as = finish_as
        if status is not None:
            self.status = status
        self.contract = contract
        if size is not None:
            self.size = size
        if price is not None:
            self.price = price
        if close is not None:
            self.close = close
        if is_close is not None:
            self.is_close = is_close
        if tif is not None:
            self.tif = tif
        if left is not None:
            self.left = left
        if fill_price is not None:
            self.fill_price = fill_price
        if text is not None:
            self.text = text

    @property
    def id(self):
        """Gets the id of this FuturesOrder.  # noqa: E501

        futures order ID  # noqa: E501

        :return: The id of this FuturesOrder.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FuturesOrder.

        futures order ID  # noqa: E501

        :param id: The id of this FuturesOrder.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def create_time(self):
        """Gets the create_time of this FuturesOrder.  # noqa: E501

        order creation time  # noqa: E501

        :return: The create_time of this FuturesOrder.  # noqa: E501
        :rtype: float
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this FuturesOrder.

        order creation time  # noqa: E501

        :param create_time: The create_time of this FuturesOrder.  # noqa: E501
        :type: float
        """

        self._create_time = create_time

    @property
    def finish_time(self):
        """Gets the finish_time of this FuturesOrder.  # noqa: E501

        order finished time. Not returned if order is open  # noqa: E501

        :return: The finish_time of this FuturesOrder.  # noqa: E501
        :rtype: float
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this FuturesOrder.

        order finished time. Not returned if order is open  # noqa: E501

        :param finish_time: The finish_time of this FuturesOrder.  # noqa: E501
        :type: float
        """

        self._finish_time = finish_time

    @property
    def finish_as(self):
        """Gets the finish_as of this FuturesOrder.  # noqa: E501

        how the order is finished.  - filled: all filled - cancelled: manually cancelled - liquidated: cancelled because of liquidation - ioc: time in force is `IOC`, finish immediately - auto_deleveraged: finished by ADL   # noqa: E501

        :return: The finish_as of this FuturesOrder.  # noqa: E501
        :rtype: str
        """
        return self._finish_as

    @finish_as.setter
    def finish_as(self, finish_as):
        """Sets the finish_as of this FuturesOrder.

        how the order is finished.  - filled: all filled - cancelled: manually cancelled - liquidated: cancelled because of liquidation - ioc: time in force is `IOC`, finish immediately - auto_deleveraged: finished by ADL   # noqa: E501

        :param finish_as: The finish_as of this FuturesOrder.  # noqa: E501
        :type: str
        """
        allowed_values = ["filled", "cancelled", "liquidated", "ioc", "auto_deleveraged"]  # noqa: E501
        if finish_as not in allowed_values:
            raise ValueError(
                "Invalid value for `finish_as` ({0}), must be one of {1}"  # noqa: E501
                .format(finish_as, allowed_values)
            )

        self._finish_as = finish_as

    @property
    def status(self):
        """Gets the status of this FuturesOrder.  # noqa: E501

        order status  - `open`: waiting to be traded - `finished`: finished   # noqa: E501

        :return: The status of this FuturesOrder.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FuturesOrder.

        order status  - `open`: waiting to be traded - `finished`: finished   # noqa: E501

        :param status: The status of this FuturesOrder.  # noqa: E501
        :type: str
        """
        allowed_values = ["open", "finished"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def contract(self):
        """Gets the contract of this FuturesOrder.  # noqa: E501

        contract name  # noqa: E501

        :return: The contract of this FuturesOrder.  # noqa: E501
        :rtype: str
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this FuturesOrder.

        contract name  # noqa: E501

        :param contract: The contract of this FuturesOrder.  # noqa: E501
        :type: str
        """
        if contract is None:
            raise ValueError("Invalid value for `contract`, must not be `None`")  # noqa: E501

        self._contract = contract

    @property
    def size(self):
        """Gets the size of this FuturesOrder.  # noqa: E501

        contract size. Specify positive number to make a bid, negative number otherwise.  Set to 0 if trying to close the position   # noqa: E501

        :return: The size of this FuturesOrder.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FuturesOrder.

        contract size. Specify positive number to make a bid, negative number otherwise.  Set to 0 if trying to close the position   # noqa: E501

        :param size: The size of this FuturesOrder.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def price(self):
        """Gets the price of this FuturesOrder.  # noqa: E501

        order price. Set to 0 if using market price  # noqa: E501

        :return: The price of this FuturesOrder.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this FuturesOrder.

        order price. Set to 0 if using market price  # noqa: E501

        :param price: The price of this FuturesOrder.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def close(self):
        """Gets the close of this FuturesOrder.  # noqa: E501

        set to true if trying to close the position  # noqa: E501

        :return: The close of this FuturesOrder.  # noqa: E501
        :rtype: bool
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this FuturesOrder.

        set to true if trying to close the position  # noqa: E501

        :param close: The close of this FuturesOrder.  # noqa: E501
        :type: bool
        """

        self._close = close

    @property
    def is_close(self):
        """Gets the is_close of this FuturesOrder.  # noqa: E501

        the order is a closing position order.  # noqa: E501

        :return: The is_close of this FuturesOrder.  # noqa: E501
        :rtype: bool
        """
        return self._is_close

    @is_close.setter
    def is_close(self, is_close):
        """Sets the is_close of this FuturesOrder.

        the order is a closing position order.  # noqa: E501

        :param is_close: The is_close of this FuturesOrder.  # noqa: E501
        :type: bool
        """

        self._is_close = is_close

    @property
    def tif(self):
        """Gets the tif of this FuturesOrder.  # noqa: E501

        Time in force. If using market price, only `ioc` is supported.  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled   # noqa: E501

        :return: The tif of this FuturesOrder.  # noqa: E501
        :rtype: str
        """
        return self._tif

    @tif.setter
    def tif(self, tif):
        """Sets the tif of this FuturesOrder.

        Time in force. If using market price, only `ioc` is supported.  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled   # noqa: E501

        :param tif: The tif of this FuturesOrder.  # noqa: E501
        :type: str
        """
        allowed_values = ["gtc", "ioc"]  # noqa: E501
        if tif not in allowed_values:
            raise ValueError(
                "Invalid value for `tif` ({0}), must be one of {1}"  # noqa: E501
                .format(tif, allowed_values)
            )

        self._tif = tif

    @property
    def left(self):
        """Gets the left of this FuturesOrder.  # noqa: E501

        size left to be traded  # noqa: E501

        :return: The left of this FuturesOrder.  # noqa: E501
        :rtype: int
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this FuturesOrder.

        size left to be traded  # noqa: E501

        :param left: The left of this FuturesOrder.  # noqa: E501
        :type: int
        """

        self._left = left

    @property
    def fill_price(self):
        """Gets the fill_price of this FuturesOrder.  # noqa: E501

        fill price of the order  # noqa: E501

        :return: The fill_price of this FuturesOrder.  # noqa: E501
        :rtype: str
        """
        return self._fill_price

    @fill_price.setter
    def fill_price(self, fill_price):
        """Sets the fill_price of this FuturesOrder.

        fill price of the order  # noqa: E501

        :param fill_price: The fill_price of this FuturesOrder.  # noqa: E501
        :type: str
        """

        self._fill_price = fill_price

    @property
    def text(self):
        """Gets the text of this FuturesOrder.  # noqa: E501

        how order is created  - web: from web - api: from API - app: from mobile phones - auto_deleveraging: from ADL - liquidation: from liquidation - insurance: from insurance   # noqa: E501

        :return: The text of this FuturesOrder.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this FuturesOrder.

        how order is created  - web: from web - api: from API - app: from mobile phones - auto_deleveraging: from ADL - liquidation: from liquidation - insurance: from insurance   # noqa: E501

        :param text: The text of this FuturesOrder.  # noqa: E501
        :type: str
        """
        allowed_values = ["web", "api", "app", "auto_deleveraging", "liquidation", "insurance"]  # noqa: E501
        if text not in allowed_values:
            raise ValueError(
                "Invalid value for `text` ({0}), must be one of {1}"  # noqa: E501
                .format(text, allowed_values)
            )

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FuturesOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
