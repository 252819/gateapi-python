# coding: utf-8

"""
    Gate API v4

    APIv4 futures provides all sorts of futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@mail.gate.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Contract(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'type': 'str',
        'quanto_multiplier': 'str',
        'leverage_min': 'str',
        'leverage_max': 'str',
        'mark_type': 'str',
        'mark_price': 'str',
        'index_price': 'str',
        'maintenance_rate': 'str',
        'funding_rate': 'str',
        'funding_interval': 'int',
        'funding_next_apply': 'float',
        'risk_limit_base': 'str',
        'risk_limit_step': 'str',
        'risk_limit_max': 'str',
        'order_size_min': 'int',
        'order_size_max': 'int',
        'order_price_deviate': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'quanto_multiplier': 'quanto_multiplier',
        'leverage_min': 'leverage_min',
        'leverage_max': 'leverage_max',
        'mark_type': 'mark_type',
        'mark_price': 'mark_price',
        'index_price': 'index_price',
        'maintenance_rate': 'maintenance_rate',
        'funding_rate': 'funding_rate',
        'funding_interval': 'funding_interval',
        'funding_next_apply': 'funding_next_apply',
        'risk_limit_base': 'risk_limit_base',
        'risk_limit_step': 'risk_limit_step',
        'risk_limit_max': 'risk_limit_max',
        'order_size_min': 'order_size_min',
        'order_size_max': 'order_size_max',
        'order_price_deviate': 'order_price_deviate'
    }

    def __init__(self, name=None, type=None, quanto_multiplier=None, leverage_min=None, leverage_max=None, mark_type=None, mark_price=None, index_price=None, maintenance_rate=None, funding_rate=None, funding_interval=None, funding_next_apply=None, risk_limit_base=None, risk_limit_step=None, risk_limit_max=None, order_size_min=None, order_size_max=None, order_price_deviate=None):  # noqa: E501
        """Contract - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._type = None
        self._quanto_multiplier = None
        self._leverage_min = None
        self._leverage_max = None
        self._mark_type = None
        self._mark_price = None
        self._index_price = None
        self._maintenance_rate = None
        self._funding_rate = None
        self._funding_interval = None
        self._funding_next_apply = None
        self._risk_limit_base = None
        self._risk_limit_step = None
        self._risk_limit_max = None
        self._order_size_min = None
        self._order_size_max = None
        self._order_price_deviate = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if quanto_multiplier is not None:
            self.quanto_multiplier = quanto_multiplier
        if leverage_min is not None:
            self.leverage_min = leverage_min
        if leverage_max is not None:
            self.leverage_max = leverage_max
        if mark_type is not None:
            self.mark_type = mark_type
        if mark_price is not None:
            self.mark_price = mark_price
        if index_price is not None:
            self.index_price = index_price
        if maintenance_rate is not None:
            self.maintenance_rate = maintenance_rate
        if funding_rate is not None:
            self.funding_rate = funding_rate
        if funding_interval is not None:
            self.funding_interval = funding_interval
        if funding_next_apply is not None:
            self.funding_next_apply = funding_next_apply
        if risk_limit_base is not None:
            self.risk_limit_base = risk_limit_base
        if risk_limit_step is not None:
            self.risk_limit_step = risk_limit_step
        if risk_limit_max is not None:
            self.risk_limit_max = risk_limit_max
        if order_size_min is not None:
            self.order_size_min = order_size_min
        if order_size_max is not None:
            self.order_size_max = order_size_max
        if order_price_deviate is not None:
            self.order_price_deviate = order_price_deviate

    @property
    def name(self):
        """Gets the name of this Contract.  # noqa: E501

        Futures name  # noqa: E501

        :return: The name of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Contract.

        Futures name  # noqa: E501

        :param name: The name of this Contract.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Contract.  # noqa: E501

        Futures type  # noqa: E501

        :return: The type of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Contract.

        Futures type  # noqa: E501

        :param type: The type of this Contract.  # noqa: E501
        :type: str
        """
        allowed_values = ["inverse", "quanto", "direct"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def quanto_multiplier(self):
        """Gets the quanto_multiplier of this Contract.  # noqa: E501

        Multiplier used in converting from invoicing to settlement currency in quanto futures  # noqa: E501

        :return: The quanto_multiplier of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._quanto_multiplier

    @quanto_multiplier.setter
    def quanto_multiplier(self, quanto_multiplier):
        """Sets the quanto_multiplier of this Contract.

        Multiplier used in converting from invoicing to settlement currency in quanto futures  # noqa: E501

        :param quanto_multiplier: The quanto_multiplier of this Contract.  # noqa: E501
        :type: str
        """

        self._quanto_multiplier = quanto_multiplier

    @property
    def leverage_min(self):
        """Gets the leverage_min of this Contract.  # noqa: E501

        minimum leverage  # noqa: E501

        :return: The leverage_min of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._leverage_min

    @leverage_min.setter
    def leverage_min(self, leverage_min):
        """Sets the leverage_min of this Contract.

        minimum leverage  # noqa: E501

        :param leverage_min: The leverage_min of this Contract.  # noqa: E501
        :type: str
        """

        self._leverage_min = leverage_min

    @property
    def leverage_max(self):
        """Gets the leverage_max of this Contract.  # noqa: E501

        maximum leverage  # noqa: E501

        :return: The leverage_max of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._leverage_max

    @leverage_max.setter
    def leverage_max(self, leverage_max):
        """Sets the leverage_max of this Contract.

        maximum leverage  # noqa: E501

        :param leverage_max: The leverage_max of this Contract.  # noqa: E501
        :type: str
        """

        self._leverage_max = leverage_max

    @property
    def mark_type(self):
        """Gets the mark_type of this Contract.  # noqa: E501

        mark price type, internal - based on internal trading, index - based on external index price  # noqa: E501

        :return: The mark_type of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._mark_type

    @mark_type.setter
    def mark_type(self, mark_type):
        """Sets the mark_type of this Contract.

        mark price type, internal - based on internal trading, index - based on external index price  # noqa: E501

        :param mark_type: The mark_type of this Contract.  # noqa: E501
        :type: str
        """
        allowed_values = ["internal", "index"]  # noqa: E501
        if mark_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mark_type` ({0}), must be one of {1}"  # noqa: E501
                .format(mark_type, allowed_values)
            )

        self._mark_type = mark_type

    @property
    def mark_price(self):
        """Gets the mark_price of this Contract.  # noqa: E501

        latest mark price  # noqa: E501

        :return: The mark_price of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._mark_price

    @mark_price.setter
    def mark_price(self, mark_price):
        """Sets the mark_price of this Contract.

        latest mark price  # noqa: E501

        :param mark_price: The mark_price of this Contract.  # noqa: E501
        :type: str
        """

        self._mark_price = mark_price

    @property
    def index_price(self):
        """Gets the index_price of this Contract.  # noqa: E501

        latest index price  # noqa: E501

        :return: The index_price of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._index_price

    @index_price.setter
    def index_price(self, index_price):
        """Sets the index_price of this Contract.

        latest index price  # noqa: E501

        :param index_price: The index_price of this Contract.  # noqa: E501
        :type: str
        """

        self._index_price = index_price

    @property
    def maintenance_rate(self):
        """Gets the maintenance_rate of this Contract.  # noqa: E501

        maintenance rate of margin  # noqa: E501

        :return: The maintenance_rate of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_rate

    @maintenance_rate.setter
    def maintenance_rate(self, maintenance_rate):
        """Sets the maintenance_rate of this Contract.

        maintenance rate of margin  # noqa: E501

        :param maintenance_rate: The maintenance_rate of this Contract.  # noqa: E501
        :type: str
        """

        self._maintenance_rate = maintenance_rate

    @property
    def funding_rate(self):
        """Gets the funding_rate of this Contract.  # noqa: E501

        funding rate  # noqa: E501

        :return: The funding_rate of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._funding_rate

    @funding_rate.setter
    def funding_rate(self, funding_rate):
        """Sets the funding_rate of this Contract.

        funding rate  # noqa: E501

        :param funding_rate: The funding_rate of this Contract.  # noqa: E501
        :type: str
        """

        self._funding_rate = funding_rate

    @property
    def funding_interval(self):
        """Gets the funding_interval of this Contract.  # noqa: E501

        funding application interval, unit in seconds  # noqa: E501

        :return: The funding_interval of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._funding_interval

    @funding_interval.setter
    def funding_interval(self, funding_interval):
        """Sets the funding_interval of this Contract.

        funding application interval, unit in seconds  # noqa: E501

        :param funding_interval: The funding_interval of this Contract.  # noqa: E501
        :type: int
        """

        self._funding_interval = funding_interval

    @property
    def funding_next_apply(self):
        """Gets the funding_next_apply of this Contract.  # noqa: E501

        next funding time  # noqa: E501

        :return: The funding_next_apply of this Contract.  # noqa: E501
        :rtype: float
        """
        return self._funding_next_apply

    @funding_next_apply.setter
    def funding_next_apply(self, funding_next_apply):
        """Sets the funding_next_apply of this Contract.

        next funding time  # noqa: E501

        :param funding_next_apply: The funding_next_apply of this Contract.  # noqa: E501
        :type: float
        """

        self._funding_next_apply = funding_next_apply

    @property
    def risk_limit_base(self):
        """Gets the risk_limit_base of this Contract.  # noqa: E501

        risk limit base  # noqa: E501

        :return: The risk_limit_base of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._risk_limit_base

    @risk_limit_base.setter
    def risk_limit_base(self, risk_limit_base):
        """Sets the risk_limit_base of this Contract.

        risk limit base  # noqa: E501

        :param risk_limit_base: The risk_limit_base of this Contract.  # noqa: E501
        :type: str
        """

        self._risk_limit_base = risk_limit_base

    @property
    def risk_limit_step(self):
        """Gets the risk_limit_step of this Contract.  # noqa: E501

        step of adjusting risk limit  # noqa: E501

        :return: The risk_limit_step of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._risk_limit_step

    @risk_limit_step.setter
    def risk_limit_step(self, risk_limit_step):
        """Sets the risk_limit_step of this Contract.

        step of adjusting risk limit  # noqa: E501

        :param risk_limit_step: The risk_limit_step of this Contract.  # noqa: E501
        :type: str
        """

        self._risk_limit_step = risk_limit_step

    @property
    def risk_limit_max(self):
        """Gets the risk_limit_max of this Contract.  # noqa: E501

        maximum risk limit the contract allowed  # noqa: E501

        :return: The risk_limit_max of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._risk_limit_max

    @risk_limit_max.setter
    def risk_limit_max(self, risk_limit_max):
        """Sets the risk_limit_max of this Contract.

        maximum risk limit the contract allowed  # noqa: E501

        :param risk_limit_max: The risk_limit_max of this Contract.  # noqa: E501
        :type: str
        """

        self._risk_limit_max = risk_limit_max

    @property
    def order_size_min(self):
        """Gets the order_size_min of this Contract.  # noqa: E501

        minimum order size the contract allowed  # noqa: E501

        :return: The order_size_min of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._order_size_min

    @order_size_min.setter
    def order_size_min(self, order_size_min):
        """Sets the order_size_min of this Contract.

        minimum order size the contract allowed  # noqa: E501

        :param order_size_min: The order_size_min of this Contract.  # noqa: E501
        :type: int
        """

        self._order_size_min = order_size_min

    @property
    def order_size_max(self):
        """Gets the order_size_max of this Contract.  # noqa: E501

        maximum order size the contract allowed  # noqa: E501

        :return: The order_size_max of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._order_size_max

    @order_size_max.setter
    def order_size_max(self, order_size_max):
        """Sets the order_size_max of this Contract.

        maximum order size the contract allowed  # noqa: E501

        :param order_size_max: The order_size_max of this Contract.  # noqa: E501
        :type: int
        """

        self._order_size_max = order_size_max

    @property
    def order_price_deviate(self):
        """Gets the order_price_deviate of this Contract.  # noqa: E501

        deviation between order price and current index price. If price of an order is denoted as `order_price`, it must meet the following condition:      abs(order_price - mark_price) <= mark_price * order_price_deviate   # noqa: E501

        :return: The order_price_deviate of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._order_price_deviate

    @order_price_deviate.setter
    def order_price_deviate(self, order_price_deviate):
        """Sets the order_price_deviate of this Contract.

        deviation between order price and current index price. If price of an order is denoted as `order_price`, it must meet the following condition:      abs(order_price - mark_price) <= mark_price * order_price_deviate   # noqa: E501

        :param order_price_deviate: The order_price_deviate of this Contract.  # noqa: E501
        :type: str
        """

        self._order_price_deviate = order_price_deviate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contract):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
